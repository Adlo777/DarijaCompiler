
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "rightOP_ASSIGNleftOR_LOGICleftAND_LOGICleftOP_COMPleftOP_RELAleftOP_ADDleftOP_MULleftOP_UNARYleft!left.AND_LOGIC ELSE FALSE FOR IDENTIFIER IF NEWLINE NUMBER OP_ADD OP_ASSIGN OP_COMP OP_MUL OP_RELA OP_UNARY OR_LOGIC TRUE UNTIL WHILEprogram : statement_listprogram : nl statement_liststatement_list : statement\n            | statement nlstatement_list : statement nl statement_liststatement : if_stmt\n            | for_stmt\n            | foreach_stmt\n            | while_stmt\n            | until_stmt\n            | expression_stmtif_stmt : IF expression blockif_stmt : IF expression block ELSE blockif_stmt : IF expression block ELSE if_stmtfor_stmt : FOR expression ',' expression ',' expression blockforeach_stmt : id '[' nl statement_list ']' while_stmt : WHILE expression blockuntil_stmt : UNTIL expression blockexpression_stmt : expression block : '{' nl statement_list '}' nl : NEWLINEnl : nl NEWLINEexpression : expression OP_UNARYexpression : '!' expressionexpression : expression OP_MUL expressionexpression : expression OP_ADD expressionexpression : expression OP_RELA expressionexpression : expression OP_COMP expressionexpression : expression AND_LOGIC expressionexpression : expression OR_LOGIC expressionexpression : expression OP_ASSIGN expression expression : '(' expression ')' expression : NUMBERexpression : TRUEexpression : FALSEexpression : idexpression : callid : IDENTIFIERid : IDENTIFIER '.' idcall : id '(' ')' call : id '(' parameters ')' parameters : expressionparameters : expression ',' parameters"
    
_lr_action_items = {'NEWLINE':([0,3,4,5,6,7,8,9,10,11,13,15,18,21,22,23,24,26,27,29,30,39,44,47,48,49,50,51,52,53,54,55,57,58,61,62,63,64,66,69,71,72,75,77,79,],[5,26,5,-21,-6,-7,-8,-9,-10,-11,-19,-36,-38,-33,-34,-35,-37,-22,26,-36,-23,5,-24,-12,5,-25,-26,-27,-28,-29,-30,-31,26,-40,-17,-18,-39,-32,26,-41,-13,-14,-16,-20,-15,]),'IF':([0,3,5,26,27,57,65,66,],[12,12,-21,-22,12,12,12,12,]),'FOR':([0,3,5,26,27,57,66,],[14,14,-21,-22,14,14,14,]),'WHILE':([0,3,5,26,27,57,66,],[16,16,-21,-22,16,16,16,]),'UNTIL':([0,3,5,26,27,57,66,],[17,17,-21,-22,17,17,17,]),'IDENTIFIER':([0,3,5,12,14,16,17,19,20,26,27,31,32,33,34,35,36,37,40,43,56,57,66,70,74,],[18,18,-21,18,18,18,18,18,18,-22,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'!':([0,3,5,12,14,16,17,19,20,26,27,31,32,33,34,35,36,37,40,56,57,66,70,74,],[19,19,-21,19,19,19,19,19,19,-22,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'(':([0,3,5,12,14,15,16,17,18,19,20,26,27,29,31,32,33,34,35,36,37,40,56,57,63,66,70,74,],[20,20,-21,20,20,40,20,20,-38,20,20,-22,20,40,20,20,20,20,20,20,20,20,20,20,-39,20,20,20,]),'NUMBER':([0,3,5,12,14,16,17,19,20,26,27,31,32,33,34,35,36,37,40,56,57,66,70,74,],[21,21,-21,21,21,21,21,21,21,-22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'TRUE':([0,3,5,12,14,16,17,19,20,26,27,31,32,33,34,35,36,37,40,56,57,66,70,74,],[22,22,-21,22,22,22,22,22,22,-22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'FALSE':([0,3,5,12,14,16,17,19,20,26,27,31,32,33,34,35,36,37,40,56,57,66,70,74,],[23,23,-21,23,23,23,23,23,23,-22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'$end':([1,2,4,5,6,7,8,9,10,11,13,15,18,21,22,23,24,25,26,27,29,30,44,46,47,49,50,51,52,53,54,55,58,61,62,63,64,69,71,72,75,77,79,],[0,-1,-3,-21,-6,-7,-8,-9,-10,-11,-19,-36,-38,-33,-34,-35,-37,-2,-22,-4,-36,-23,-24,-5,-12,-25,-26,-27,-28,-29,-30,-31,-40,-17,-18,-39,-32,-41,-13,-14,-16,-20,-15,]),']':([4,5,6,7,8,9,10,11,13,15,18,21,22,23,24,26,27,29,30,44,46,47,49,50,51,52,53,54,55,58,61,62,63,64,68,69,71,72,75,77,79,],[-3,-21,-6,-7,-8,-9,-10,-11,-19,-36,-38,-33,-34,-35,-37,-22,-4,-36,-23,-24,-5,-12,-25,-26,-27,-28,-29,-30,-31,-40,-17,-18,-39,-32,75,-41,-13,-14,-16,-20,-15,]),'}':([4,5,6,7,8,9,10,11,13,15,18,21,22,23,24,26,27,29,30,44,46,47,49,50,51,52,53,54,55,58,61,62,63,64,69,71,72,73,75,77,79,],[-3,-21,-6,-7,-8,-9,-10,-11,-19,-36,-38,-33,-34,-35,-37,-22,-4,-36,-23,-24,-5,-12,-25,-26,-27,-28,-29,-30,-31,-40,-17,-18,-39,-32,-41,-13,-14,77,-16,-20,-15,]),'OP_UNARY':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[30,-36,-38,-33,-34,-35,-37,30,-36,-23,30,30,30,-24,30,30,30,30,30,30,30,30,-40,30,-39,-32,30,-41,30,]),'OP_MUL':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[31,-36,-38,-33,-34,-35,-37,31,-36,-23,31,31,31,-24,31,-25,31,31,31,31,31,31,-40,31,-39,-32,31,-41,31,]),'OP_ADD':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[32,-36,-38,-33,-34,-35,-37,32,-36,-23,32,32,32,-24,32,-25,-26,32,32,32,32,32,-40,32,-39,-32,32,-41,32,]),'OP_RELA':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[33,-36,-38,-33,-34,-35,-37,33,-36,-23,33,33,33,-24,33,-25,-26,-27,33,33,33,33,-40,33,-39,-32,33,-41,33,]),'OP_COMP':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[34,-36,-38,-33,-34,-35,-37,34,-36,-23,34,34,34,-24,34,-25,-26,-27,-28,34,34,34,-40,34,-39,-32,34,-41,34,]),'AND_LOGIC':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[35,-36,-38,-33,-34,-35,-37,35,-36,-23,35,35,35,-24,35,-25,-26,-27,-28,-29,35,35,-40,35,-39,-32,35,-41,35,]),'OR_LOGIC':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[36,-36,-38,-33,-34,-35,-37,36,-36,-23,36,36,36,-24,36,-25,-26,-27,-28,-29,-30,36,-40,36,-39,-32,36,-41,36,]),'OP_ASSIGN':([13,15,18,21,22,23,24,28,29,30,38,41,42,44,45,49,50,51,52,53,54,55,58,60,63,64,67,69,78,],[37,-36,-38,-33,-34,-35,-37,37,-36,-23,37,37,37,-24,37,-25,-26,-27,-28,-29,-30,37,-40,37,-39,-32,37,-41,37,]),'[':([15,18,63,],[39,-38,-39,]),'{':([18,21,22,23,24,28,29,30,41,42,44,49,50,51,52,53,54,55,58,63,64,65,69,78,],[-38,-33,-34,-35,-37,48,-36,-23,48,48,-24,-25,-26,-27,-28,-29,-30,-31,-40,-39,-32,48,-41,48,]),',':([18,21,22,23,24,29,30,38,44,49,50,51,52,53,54,55,58,60,63,64,67,69,],[-38,-33,-34,-35,-37,-36,-23,56,-24,-25,-26,-27,-28,-29,-30,-31,-40,70,-39,-32,74,-41,]),')':([18,21,22,23,24,29,30,40,44,45,49,50,51,52,53,54,55,58,59,60,63,64,69,76,],[-38,-33,-34,-35,-37,-36,-23,58,-24,64,-25,-26,-27,-28,-29,-30,-31,-40,69,-42,-39,-32,-41,-43,]),'.':([18,],[43,]),'ELSE':([47,77,],[65,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,27,57,66,],[2,25,46,68,73,]),'nl':([0,4,39,48,],[3,27,57,66,]),'statement':([0,3,27,57,66,],[4,4,4,4,4,]),'if_stmt':([0,3,27,57,65,66,],[6,6,6,6,72,6,]),'for_stmt':([0,3,27,57,66,],[7,7,7,7,7,]),'foreach_stmt':([0,3,27,57,66,],[8,8,8,8,8,]),'while_stmt':([0,3,27,57,66,],[9,9,9,9,9,]),'until_stmt':([0,3,27,57,66,],[10,10,10,10,10,]),'expression_stmt':([0,3,27,57,66,],[11,11,11,11,11,]),'expression':([0,3,12,14,16,17,19,20,27,31,32,33,34,35,36,37,40,56,57,66,70,74,],[13,13,28,38,41,42,44,45,13,49,50,51,52,53,54,55,60,67,13,13,60,78,]),'id':([0,3,12,14,16,17,19,20,27,31,32,33,34,35,36,37,40,43,56,57,66,70,74,],[15,15,29,29,29,29,29,29,15,29,29,29,29,29,29,29,29,63,29,15,15,29,29,]),'call':([0,3,12,14,16,17,19,20,27,31,32,33,34,35,36,37,40,56,57,66,70,74,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'block':([28,41,42,65,78,],[47,61,62,71,79,]),'parameters':([40,70,],[59,76,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','Parser.py',25),
  ('program -> nl statement_list','program',2,'p_program_nl','Parser.py',29),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser.py',34),
  ('statement_list -> statement nl','statement_list',2,'p_statement_list','Parser.py',35),
  ('statement_list -> statement nl statement_list','statement_list',3,'p_statement_list_recursive','Parser.py',39),
  ('statement -> if_stmt','statement',1,'p_statement','Parser.py',44),
  ('statement -> for_stmt','statement',1,'p_statement','Parser.py',45),
  ('statement -> foreach_stmt','statement',1,'p_statement','Parser.py',46),
  ('statement -> while_stmt','statement',1,'p_statement','Parser.py',47),
  ('statement -> until_stmt','statement',1,'p_statement','Parser.py',48),
  ('statement -> expression_stmt','statement',1,'p_statement','Parser.py',49),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','Parser.py',54),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt_else','Parser.py',58),
  ('if_stmt -> IF expression block ELSE if_stmt','if_stmt',5,'p_if_stmt_elseif','Parser.py',62),
  ('for_stmt -> FOR expression , expression , expression block','for_stmt',7,'p_for_stmt','Parser.py',67),
  ('foreach_stmt -> id [ nl statement_list ]','foreach_stmt',5,'p_foreach_stmt','Parser.py',72),
  ('while_stmt -> WHILE expression block','while_stmt',3,'p_while_stmt','Parser.py',77),
  ('until_stmt -> UNTIL expression block','until_stmt',3,'p_until_stmt','Parser.py',82),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','Parser.py',87),
  ('block -> { nl statement_list }','block',4,'p_block','Parser.py',92),
  ('nl -> NEWLINE','nl',1,'p_nl','Parser.py',97),
  ('nl -> nl NEWLINE','nl',2,'p_nl_recursive','Parser.py',101),
  ('expression -> expression OP_UNARY','expression',2,'p_expression_unary','Parser.py',106),
  ('expression -> ! expression','expression',2,'p_expression_not','Parser.py',110),
  ('expression -> expression OP_MUL expression','expression',3,'p_expression_mul','Parser.py',114),
  ('expression -> expression OP_ADD expression','expression',3,'p_expression_add','Parser.py',118),
  ('expression -> expression OP_RELA expression','expression',3,'p_expression_rela','Parser.py',122),
  ('expression -> expression OP_COMP expression','expression',3,'p_expression_comp','Parser.py',126),
  ('expression -> expression AND_LOGIC expression','expression',3,'p_expression_and','Parser.py',130),
  ('expression -> expression OR_LOGIC expression','expression',3,'p_expression_or','Parser.py',134),
  ('expression -> expression OP_ASSIGN expression','expression',3,'p_expression_assign','Parser.py',138),
  ('expression -> ( expression )','expression',3,'p_expression_bracket','Parser.py',142),
  ('expression -> NUMBER','expression',1,'p_expression_num','Parser.py',146),
  ('expression -> TRUE','expression',1,'p_expression_true','Parser.py',150),
  ('expression -> FALSE','expression',1,'p_expression_false','Parser.py',154),
  ('expression -> id','expression',1,'p_expression_identifier','Parser.py',158),
  ('expression -> call','expression',1,'p_expression_call','Parser.py',162),
  ('id -> IDENTIFIER','id',1,'p_identifier','Parser.py',167),
  ('id -> IDENTIFIER . id','id',3,'p_identifier_recursive','Parser.py',171),
  ('call -> id ( )','call',3,'p_call','Parser.py',176),
  ('call -> id ( parameters )','call',4,'p_call_parameters','Parser.py',180),
  ('parameters -> expression','parameters',1,'p_parameters','Parser.py',185),
  ('parameters -> expression , parameters','parameters',3,'p_parameters_recursive','Parser.py',189),
]
